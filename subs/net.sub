# -*- sh -*-
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright © 2007-2018 ANSSI. All Rights Reserved.
# CLIP Networking configuration functions.
# Copyright (C) 2006-2009 SGDN/DCSSI
# Copyright (C) 2009-2012 SGDSN/ANSSI
# Author: Vincent Strubel <clipos@ssi.gouv.fr>
# Author: Mickaël Salaün <clipos@ssi.gouv.fr>
# All rights reserved.

if [[ -n "${NET_SUB_DEBUG}" ]]; then
	set -x 
fi

###############################################################
#                   Error Management                          #
###############################################################

# Log an error message to stderr and syslog, then exit (which should be
# caught by the set_opts trap).

net_error() {
	echo "${1}" >&2
	logger -p local0.err -t "[NET]" "${1}"
	exit 1
}

net_warn() {
	echo "${1}" >&2
	logger -p local0.err -t "[NET]" "${1}"
}

###############################################################
#                   Address transformations                   #
###############################################################

# INTERNAL
# Print out the prefix mask for a given prefix length, e.g.
# 16 -> 0xffff0000, 24 -> 0xffffff00
# ARGS: <prefix len>

_net_pref() {
	local -i preflen=${1}
	if [[ ${preflen} -lt 0 || ${preflen} -gt 32 ]]; then
		net_error "Unsupported prefix length: ${preflen}"
	fi
	local bcast=$(( (1<<32) - (1<<(32-${preflen})) ))
	echo "${bcast}"
}

# INTERNAL
# Print out the broadcast mask for a given prefix length, e.g.
# 16 -> 0xffff, 24 -> 0xff
# ARGS: <prefix len>

_net_bcast() {
	local -i preflen=${1}
	[[ ${preflen} -ge 0 && ${preflen} -le 32 ]] || \
		net_error "Unsupported prefix length: ${preflen}"
	local snet=$(( (1 << (32 - ${preflen}) ) - 1 ))
	echo "${snet}"
}

# Print out the netmask, in number and dots format, for a given
# prefix len, e.g. 16 -> 255.255.0.0, 24 -> 255.255.255.0.
# ARGS: <prefix len>

net_get_nbrdots_mask() {
	local -i preflen=${1}
	local -i mask=$(_net_pref ${preflen})
	printf "%d.%d.%d.%d" \
		"$(( (${mask} & 0xff000000) >> 24 ))" \
		"$(( (${mask} & 0xff0000) >> 16 ))" \
		"$(( (${mask} & 0xff00) >> 8 ))" \
		"$(( (${mask} & 0xff) ))"
}

# Get the subnet for a given address and prefix len, e.g.
# 192.168.1.2 + 24 -> 192.168.1.0/24
# ARGS: <address> <prefix len> [-f]

_net_get_subnet() {
	local fulladdr="${1}"
	local preflen="${2}"
	local opt="${3}"

	local -i mask=$(_net_pref "${preflen}")

	local -a addr=( ${fulladdr//./ } )
	local num
	for num in ${addr[@]}; do
		[[ ${num} -ge 0 && ${num} -le 255 ]] || \
			net_error "Unsupported address component: ${num}"
	done

	local ip_fmt="%d.%d.%d.%d"
	[[ "${opt}" = "-f" ]] && ip_fmt="%03d.%03d.%03d.%03d"
	printf "${ip_fmt}" \
		"$(( ${addr[0]} & (${mask} >> 24) ))" \
		"$(( ${addr[1]} & (${mask} >> 16) ))" \
		"$(( ${addr[2]} & (${mask} >> 8) ))" \
		"$(( ${addr[3]} & ${mask} ))"
}

net_get_subnet() {
	local pref="$(_net_get_subnet "${1}" "${2}")"
	echo -n "${pref}/${2}"
}

# Get the broadcast address for a given address and prefix len, e.g.
# 192.168.1.2 + 24 -> 192.168.1.255
# ARGS: <address> <prefix len> [-f]

net_get_bcast() {
	local fulladdr="${1}"
	local preflen="${2}"
	local opt="${3}"

	[[ -n "${preflen}" ]] || net_error "Not enough arguments for get_bcast()"
	local mask=$(_net_bcast "${preflen}")

	local -a addr=( ${fulladdr//./ } )
	local num
	for num in ${addr[@]}; do
		[[ ${num} -ge 0 && ${num} -le 255 ]] || \
			net_error "Unsupported address component: ${num}"
	done

	local ip_fmt="%d.%d.%d.%d"
	[[ "${opt}" = "-f" ]] && ip_fmt="%03d.%03d.%03d.%03d"
	printf "${ip_fmt}" \
		"$(( ${addr[0]} | ((${mask} >> 24)&0xff) ))" \
		"$(( ${addr[1]} | ((${mask} >> 16)&0xff) ))" \
		"$(( ${addr[2]} | ((${mask} >> 8)&0xff) ))" \
		"$(( ${addr[3]} | (${mask}&0xff) ))"
}

# Get the broadcast address (internal, one argument only)
# ARGS: "<address>/<prefix len>"

_net_get_bcast() {
	local addr="${1%%/*}" preflen="${1##*/}"

	net_get_bcast "${addr}" "${preflen}"
}

# Check if two networks intersect, return 0 if they do, 1 if they don't
# ARGS: <addr1> <preflen1> <addr2> <preflen2>

net_intersect() {
	local addr1="${1}"
	local pref1="${2}"
	local addr2="${3}"
	local pref2="${4}"

	[[ -n "${pref2}" ]] || net_error "Not enough arguments for check_nomatch()"

	local bcast1="$(net_get_bcast "${addr1}" "${pref1}" -f)"
	local net1="$(_net_get_subnet "${addr1}" "${pref1}" -f)"
	local bcast2="$(net_get_bcast "${addr2}" "${pref2}" -f)"
	local net2="$(_net_get_subnet "${addr2}" "${pref2}" -f)"

	if [[ "${bcast1}" < "${net2}" ]]; then
		return 1
	fi
	if [[ "${bcast2}" < "${net1}" ]]; then
		return 1
	fi
	return 0
}
	
# Check for intersections between a list of adresses, return 0 in case of
# intersection, 1 otherwise
# ARGS: <addr1> <addr2> <addr3> ... <addrn>

net_addrs_intersect() {
	local addrs="$(echo $* | sed -e 's: \+:\n:g')"
	local onum="$(echo "${addrs}" | wc -l)"
	local snum="$(echo "${addrs}" | sort | uniq | wc -l)"

	[[ "${onum}" != "${snum}" ]] && return 0
	return 1
}

###############################################################
#                   Interface configuration                   #
###############################################################

# Print out the address for a given label on a given interface, if 
# it exists. Nothing is printed out if the label does not exist.
# ARGS: <interface> [<label>]   e.g. eth0 core

net_getaddr() {
	if [[ -z "${2}" ]] ; then
		ip addr show dev "${1}" | \
			awk '$1 ~ /inet/ {print $2}' | head -n 1
	else
		ip addr show dev "${1}" label "${1}:${2}" | \
			awk '$1 ~ /inet/ {print $2}'
	fi
}

# Return 0 if a given label exists on a given interface, else return 1.
# ARGS: <interface> <label>

net_labelexists() {
	local ret=$(net_getaddr "${1}" "${2}")
	if [[ -z "${ret}" ]]; then 
		return 1
	else
		return 0
	fi
}

# Return 0 if a given interface is "UP", else return 1.
# ARGS: <interface>

net_ifisup() {
	ip link show "${1}" | grep -qw "UP"
}

# Wait until the interface become ready, or return 1 if it take too long.
# ARGS: <interface> [max_time=50]

net_ifwaitup() {
	local iface="${1}"
	local -i count=50
	[[ -n "$2" ]] && max_time="$2"

	local -i ret=0
	if [[ -z "${iface}" ]]; then
		net_warn "Must provide an interface"
		return 1
	fi

	while ip link show "${iface}" | grep -qw 'NO-CARRIER'; do
		sleep .1;
		count=count-1
		if [[ ${count} -le 0 ]]; then
			ret=1
			break
		fi
	done
	return ${ret}
}

# Add a labelled address to an interface.
# ARGS: <interface> "<address>/<prefix len> [ <label> ]

net_addaddr() {
	local bcast=$(_net_get_bcast "${2}")
	if [[ -z "${bcast}" ]]; then
		net_warn "Incomplete address ${2}"
		return 1
	fi
	if [[ -n "${3}" ]]; then
		if net_labelexists "${1}" "${3}" ; then
			net_warn "Label ${1}:${3} already exists"
			return 1
		fi
		if ip addr add dev "${1}" "${2}" \
				broadcast "${bcast}" label "${1}:${3}"; then
			einfo "${1}:${3} : ${2}"
		else
			net_warn "Failed to add address ${2} to ${1}"
			return 1
		fi
	else
		if ip addr add dev "${1}" "${2}" broadcast "${bcast}"; then
			einfo "${1} : ${2}"
		else
			net_warn "Failed to add address ${2} to ${1}"
			return 1
		fi
	fi
}

# Set an interface "UP"
# ARGS: <interface>

net_ifup() {
	if ! ip link set up dev "${1}"; then
		net_warn "Failed to set interface ${1} up"
		return 1
	fi
}

# Set an interface "DOWN"
# ARGS: <interface>

net_ifdown() {
	if ! ip link set down dev "${1}"; then
		net_warn "Failed to set interface ${1} down"
		return 1
	fi
}

# Configure an interface by giving it a set of labelled addresses, then
# turning it "UP".
# ARGS: <interface> "<label1>:<address1>/<prefix1>" "<label2>:<address2>/<prefix2>" ...

net_startif() {
	local iface="${1}" 
	if net_ifisup "${iface}"; then
		net_warn "Interface ${iface} has already been started"
	fi
	shift
	local label="" ipaddr="" 
	local addr
	for addr in "${@}"; do 
		label=${addr%%:*}
		ipaddr=${addr##*:}
		if [[ -z "${ipaddr}" ]] ; then
			net_warn "net_startif: incomplete address"
			return 1
		fi
		if [[ "${label}" == "${addr}" ]]; then
			if ! net_addaddr "${iface}" "${ipaddr}"; then
				net_warn "Failed to add address ${ipaddr} to ${iface}"
				return 1
			fi
		else
			if ! net_addaddr "${iface}" "${ipaddr}" "${label}"; then
				net_warn "Failed to add address ${ipaddr} to ${iface} (${label})"
				return 1
			fi
		fi
	done

	net_ifup "${iface}"
}

# Configure an interface's MTU
# ARGS: <interface> <mtu>
net_set_mtu() {
	local iface="${1}"
	local mtu="${2}"

	if ! ip link set "${iface}" mtu "${mtu}"; then
		net_warn "Failed to set mtu to ${mtu} on ${iface}"
		return 1
	fi
}
		
# De-configure an interface by turning
# it "DOWN" then flushing all its addresses.
# ARGS: <interface>

net_stopif() {
	net_ifdown "${1}"
	if ! ip addr flush dev "${1}"; then
		net_warn "Failed to flush device ${1}"
		return 1
	fi
}

# Route packets for a destination address range through a given interface.
# ARGS: <interface> <address range>

net_route_dev() {
	if ! ip route add to "${2}" dev "${1}"; then
		net_warn "Failed to add device route ${1} for ${2}"
		return 1
	fi
}

# Route packets for a destination address range through a given gateway.
# ARGS : <gateway address> <address range>

net_route_gtw() {
	if ! ip route add to "${2}" via "${1}"; then
		net_warn "Failed to add gateway route ${1} for ${2}"
		return 1
	fi
}

# Set up a default route (address)
# ARGS: <gateway address>

net_route_default() {
	if ! ip route add via "${1}"; then
		net_warn "Failed to add default route ${1}"
		return 1
	fi
}

# Delete the default route.
# ARGS: none.

net_route_deldefault() {
	if ! ip route del default; then
		net_warn "Failed to delete default route"
		return 1
	fi
}

		##############################
		#     Virtual interfaces     #
		##############################

# Create a virtual interface pair
# ARGS: <jail name>
net_veth_create() {
	local jail="${1//_}"

	if ! ip link add "${jail}1" mtu 1300 type veth peer name "${jail}0" mtu 1300; then
		net_warn "Failed to create veth pair for ${jail}"
		return 1
	fi

	if ! sysctl -w "net.ipv4.conf.${jail}1.proxy_arp=1" 1>/dev/null; then
		net_warn "Failed to activate proxy_arp on ${jail}1"
		return 1
	fi
}

# Move a virtual interface endpoint to a namespace
# ARGS: <jail name> <pid>
net_veth_setns() {
	local jail="${1//_}"

	if ! ip link set dev "${jail}0" netns "${2}" ; then
		net_warn "Failed to set net namespace on ${jail}0"
		return 1
	fi
}
